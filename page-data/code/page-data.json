{"componentChunkName":"component---src-pages-code-js","path":"/code/","result":{"data":{"allWordpressPost":{"nodes":[{"title":"Capybr","slug":"capybr","content":"\n<p>A dating app for capybaras, built after discovering a <a href=\"https://capy.lol/\">capybara image api</a>. Built with React and <a href=\"https://tracery.io/\">Tracery</a> for hand crafted text expansion to generate profiles. Names sourced from <a href=\"https://onomancer.sibr.dev/\">Onomancer</a>, a previous project for crowdsourcing names.</p>\n\n\n\n<p><a href=\"https://capybr.wobscale.lol\">Swipe the capybara of your dreams</a></p>\n\n\n\n<p><a href=\"https://github.com/jmaliksi/capybr\">Github</a></p>\n","date":"2022","tags":[{"name":"react"},{"name":"webapp"}],"jetpack_featured_media_url":"//wp-content/uploads/2024/09/screenshot-2024-09-13-at-10.05.53e280afam.png"},{"title":"Sports, Splorts, &amp; Statistics: Why Data Accessibility Matters in Blaseball and&nbsp;Beyond","slug":"sports-splorts-statistics-why-data-accessibility-matters-in-blaseball-and-beyond","content":"\n<p>Tech Talk for <a href=\"https://roguelike.club/\" target=\"_blank\" rel=\"noreferrer noopener\">Roguelike Celebration</a>: Roguelikes are well-known for their ability to generate infinitely complex histories, but how do you make such a detailed—and often ephemeral—historical record an accessible resource for storytelling? We discuss our experience as fan-archivists and tool-builders for the absurdist online baseball simulator, Blaseball, and how going beyond the raw event log to increase data accessibility, automate insights, and encourage “creative” statistical interpretations helps make storytellers out of everyone in the community by sharing not just data, but meaning.</p>\n\n\n\n<p><a href=\"https://www.youtube.com/watch?v=WeRCGy3-uPY\" target=\"_blank\" rel=\"noreferrer noopener\">Watch on youtube</a></p>\n\n\n\n<p><a rel=\"noreferrer noopener\" href=\"https://docs.google.com/document/d/e/2PACX-1vTFezcb3GFz1ywUx9JSZ5WchsKQgWCr_eQQCCE1Y9s0LCQ0BppPaKurrQaiOJmZ7o7Z_LY0S3T82MIr/pub\" target=\"_blank\">Transcript</a></p>\n\n\n\n<p><a href=\"https://docs.google.com/presentation/d/1vCeam7MZpKooMcIcHAsaKpoNlPxRqhmw3SMy3akhkTE/edit#slide=id.p\" target=\"_blank\" rel=\"noreferrer noopener\">Slides</a></p>\n","date":"2021","tags":[{"name":"roguelike celebration"},{"name":"tech talk"}],"jetpack_featured_media_url":"//wp-content/uploads/2021/11/fb2nf38vkaekg7t.jpeg"},{"title":"Feedeck","slug":"feedeck","content":"\n<p>Feedeck is a frontend over <a href=\"https://alisww.github.io/eventually/#/default/events\">Eventually</a>, an indexer for <a href=\"https://blaseball.com/\">Blaseball</a> Feed events that allows fans to filter and view multiple streams of Feed events similar to Tweetdeck. While the Blaseball Feed did great things to help accessibility, Feedeck was built to take information accessibility one step further for easier realtime usage (ie for splortscasters), history trawling, sharing, and idling (like how I have it open in the background of my work computer). Also was an excuse to learn Redux and play more with React with my feet a bit more wet.</p>\n\n\n\n<p><a href=\"https://github.com/jmaliksi/feedeck\">GitHub</a></p>\n\n\n\n<p><a href=\"https://feedeck.sibr.dev/\">Deal your Banquet. Consume the Feed.</a></p>\n","date":"2021","tags":[{"name":"blaseball"},{"name":"webapp"}],"jetpack_featured_media_url":"//wp-content/uploads/2021/07/screen-shot-2021-07-23-at-3.43.10-pm.png"},{"title":"Splortscaster&#8217;s Tome","slug":"splortscasters-tome","content":"\n<p>A light React app that crawls the Blaseball statsheet APIs to present historic as well as listening to the event feed to provide realtime updates on ongoing games. Built compact to put on a corner of a screen for live broadcasters to refer to. </p>\n\n\n\n<p><a href=\"http://tome.sibr.dev/\">Open the Tome</a></p>\n\n\n\n<p><a href=\"https://github.com/Society-for-Internet-Blaseball-Research/tome\">GitHub</a></p>\n","date":"2021","tags":[{"name":"blaseball"}],"jetpack_featured_media_url":"//wp-content/uploads/2021/04/screen-shot-2021-04-26-at-9.56.50-pm.png"},{"title":"The Escher Complex","slug":"the-escher-complex","content":"\n<p>Using the narrative fiction framework <a href=\"https://github.com/kriskowal/kni\">Kni</a> by Kris Kowal, I made an adventure wherein you endlessly peruse the countless vending machines in the Escher Complex, an office building in Infinite Los Angeli rented out by the Society for Internet Blaseball Research. It is the truest simulation of what it is like to work at SIBR.</p>\n\n\n\n<p><a href=\"https://jmaliksi.github.io/the-escher-complex\">Welcome to the Escher Complex</a>.</p>\n","date":"2021","tags":null,"jetpack_featured_media_url":"//wp-content/uploads/2021/02/intro.png"},{"title":"Wobsite","slug":"wobsite","content":"\n<p>This current website iteration is written using React and Gatsby to compile static pages from an external WordPress used for content management. Background is a dynamically rendered SVG mask over my Instagram photos that stays consistent because it&#8217;s using a seeded mersenne-twister. If you&#8217;re not over-engineering your personal site, what&#8217;s even the point.</p>\n\n\n\n<p><a href=\"https://github.com/jmaliksi/website-next\">Github</a></p>\n","date":"2021","tags":[{"name":"javascript"},{"name":"react"},{"name":"website"}],"jetpack_featured_media_url":"//wp-content/uploads/2021/01/screen-shot-2021-02-01-at-3.26.45-pm.png"},{"title":"Prismatic Dream","slug":"prismatic-dream","content":"\n<p>Prismatic Dream uses Tracery and additional Javascript to show dream-like sequences. Transitions between scenes happen by selecting colors rather than traditional movement, and concepts from the current scene related to the selected color are used to influence the next scene.</p>\n\n\n\n<p><a href=\"https://jmaliksi.github.io/prismatic-dream/\">Dream without a dream</a></p>\n\n\n\n<p><a href=\"https://github.com/jmaliksi/prismatic-dream\">GitHub</a></p>\n","date":"2020","tags":[{"name":"javascript"},{"name":"tracery"},{"name":"webapp"}],"jetpack_featured_media_url":"//wp-content/uploads/2021/01/screen-shot-2021-01-31-at-2.38.40-pm.png"},{"title":"Onomancer","slug":"onomancer","content":"\n<p>Onomancer is a webapp that crowdsources blaseball names and presents a voting system to distill the ultimate name. It also allows you to create your own fan teams of these blaseball players, generates full blaseball stat blocks for each name, and exposes a REST API for your random name needs. Written as a python/flask app and backed by sqlite.</p>\n\n\n\n<p><a href=\"https://onomancer.sibr.dev/\">The Onomancer beckons: Distill the Ultimate Blaseball Name.</a></p>\n\n\n\n<p><a href=\"https://github.com/jmaliksi/onomancer\">Github</a></p>\n","date":"2020","tags":[{"name":"blaseball"},{"name":"python"},{"name":"webapp"}],"jetpack_featured_media_url":"//wp-content/uploads/2021/01/screen-shot-2021-01-31-at-1.05.10-pm.png"},{"title":"Blaseball Mike","slug":"blaseball-mike","content":"\n<p>Blaseball Mike is a python wrapper around the Blaseball API as well as the Society for Internet Blaseball Research&#8217;s other supplementary APIs. Maintained with the rest of SIBR with primary contributions by me and Edgarware.</p>\n\n\n\n<p><a href=\"https://github.com/jmaliksi/blaseball-mike\">Github</a></p>\n","date":"2020","tags":[{"name":"api"},{"name":"blaseball"},{"name":"python"}],"jetpack_featured_media_url":""},{"title":"Jlohn Mladden","slug":"jlohn-mladden","content":"\n<p>Jlohn Mladden is a python app that listens to the <a href=\"http://blaseball.com\">Blaseball</a> game stream to play text-to-speech and context sensitive sound effects, as well as featuring a configurable quip system. Since blaseball does not sleep, neither should this bot. Runs on my twitch channel when Hawai&#8217;i Fridays games are going (we never make the playoffs so it&#8217;s ok).</p>\n\n\n\n<p><a href=\"https://github.com/jmaliksi/jlohn-mladden\">Github</a></p>\n","date":"2020","tags":[{"name":"blaseball"},{"name":"python"}],"jetpack_featured_media_url":""},{"title":"The Bender: Unconditional&nbsp;Liver","slug":"the-bender-unconditional-liver","content":"\n<p>An iPad game made for the second Molyjam by Andrea Benavides, Anna Lotko, Nic Vasconcellos, Noah Witherspoon, and myself. The quote we based our game off of was &#8220;I want you to experience unconditional love. That&#8217;s what I&#8217;m trying to get at.&#8221; We took that to mean the uncondtional love your liver gives you when you are binge drinking.</p>\n\n\n\n<p>And so, you and some friends must act quickly to perform various actions while the owner of these organs drinks themselves to an early grave. Actions include starting the heart back up by squeezing it, inducing vomit by flicking the stomach, and emptying the bladder by tilting the iPad</p>\n\n\n\n<p>Made in Objective C. Art done with photoshop and green make up, and sounds mixed with Audacity. I acted as sound engineer then transitioned to programming secondary features toward the end.</p>\n\n\n\n<p><a href=\"http://www.youtube.com/watch?v=yXqGt6yHazs\" target=\"_blank\" rel=\"noreferrer noopener\">Watch a gameplay video of The Bender: Unconditional Liver: Inspired by A True Story: III: The Reckoning: On Ice: The Musical</a></p>\n","date":"2013","tags":[{"name":"game jam"},{"name":"molyjam"}],"jetpack_featured_media_url":"//wp-content/uploads/2021/01/liver.jpg"},{"title":"Goodnight Molly","slug":"goodnight-molly","content":"\n<p>An iPad game made for the first ever Molyjam by Andrea Haid, Peter Mohrbacher, Richard Shemaka, Dan Spaventa, Noah Witherspoon, and me. The tweet we based our game off of was &#8220;What if the pause button was a weapon?&#8221; In this game, you play as Molly, a child experiencing night terrors. When she closes her eyes, her wildest fears come to life and terrorize her bedroom, but when she opens them (pauses the game), the monsters stop moving and come under the influence of physics, hopefully crashing into each other and stuff. I was the primary sound engineer and UI engineer.</p>\n\n\n\n<p>The game was made in 48 hours using the Unity game engine. Original art was made with Photoshop and Flash, music was composed with FL studio, and sound effects were mixed with Audacity. I acted as sound engineer and UI programmer.</p>\n\n\n\n<p><a href=\"http://www.youtube.com/watch?v=NfFKWc7f5PI\" target=\"_blank\" rel=\"noreferrer noopener\">Watch the gameplay video</a></p>\n","date":"2012","tags":[{"name":"gamejam"},{"name":"molyjam"}],"jetpack_featured_media_url":"//wp-content/uploads/2021/01/goodnight_molly.jpg"},{"title":"Sync","slug":"sync","content":"\n<p>A two player flash game made for my Game Design as Cultural Practice class with Nathan Bailey, Ben Chapman, Cameron Luck, David Dudley, and Jacob Paul. The game is played with two players on one computer. The first player controls a 2D sprite and attempts to blend in with several AIs moving about on screen. A second player then tries to determine which of the sprites is the player.</p>\n\n\n\n<p>Built with Flash Builder instead of just Flash, and all art and sound assets are original works.</p>\n\n\n\n<p><a href=\"http://www.kongregate.com/games/LCC4725HeyHey/sync\" target=\"_blank\" rel=\"noreferrer noopener\">Play Sync</a></p>\n","date":"2011","tags":[{"name":"college"},{"name":"game"}],"jetpack_featured_media_url":"//wp-content/uploads/2021/01/sync.png"},{"title":"Mini Mages","slug":"mini-mages","content":"\n<p>An iOS game made for Romp Interactive with Ali Wallick, Wes Anderson, Rose Peng, and Rob Spessard. The game takes advantage of networked iOS devices, specifically using an iPad as console with up to four iPhones or iPods connected as controllers. The game is structured as a set of minigames as the end goal was to explore functionality, and we felt we could best do that by making small games that completely focused on one aspect of the devices.</p>\n\n\n\n<p>The entire game was made with the Unity engine in conjunction with the Gamekit plugin for networking. Art was original, but music was taken from license-free online sources due to time constraints.</p>\n\n\n\n<p><a href=\"http://youtube.com/watch?v=qVdAuJmO3oo\" target=\"_blank\" rel=\"noreferrer noopener\">Watch the demo</a></p>\n","date":"2011","tags":[{"name":"college"},{"name":"ios"},{"name":"multiplayer"}],"jetpack_featured_media_url":"//wp-content/uploads/2021/01/minimages.png"},{"title":"The Last Extinction:&nbsp;Earth","slug":"the-last-extinction-earth","content":"\n<p>My third Global Game Jam entry, made with Dan Spaventa, Richard Shemaka, Alison Cundiff, Vu Ha, and Nathan Bailey. I acted as the sound engineer, as well as helping with design and debugging. The topic for this 48 hour competition was &#8220;extinction.&#8221;</p>\n\n\n\n<p>In this game you take control of four space craft during Earth&#8217;s final hours. You fire on magma fissures that emanate from the ever expanding core with three satellites, using their beams to reverse the fault growth and buy some time while using the shuttle to beam up as many survivors as you can. The game plays like an arcade game, where the goal is simply to get the most points; however, you get no points for simply surviving as long as possible. (besides, the topic is extinction, so the planet is blowing up no matter what you do)</p>\n\n\n\n<p>Made with Unity 3D to deploy on the web. Music was made with FL Studio, and sound effects were mixed in Audacity.</p>\n\n\n\n<p>PS. The cheese was layed on in places on purpose. Roll with it.</p>\n\n\n\n<p><a href=\"https://www.youtube.com/watch?v=fYm8WC9TV7U\">Watch gameplay video</a></p>\n\n\n\n<p><a href=\"http://www.kongregate.com/games/stregawolf/the-last-extinction-earth\" target=\"_blank\" rel=\"noreferrer noopener\">Play The Last Extinction: Earth</a></p>\n","date":"2011","tags":[{"name":"game"},{"name":"gamejam"}],"jetpack_featured_media_url":"//wp-content/uploads/2021/01/lastextinction.png"}]}},"pageContext":{}},"staticQueryHashes":["4113534866"]}